// Robert Penner's easeOutExpo
function easeOutExpo(t, b, c, d) {
    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
}
/**
 * Counts from a number to the end incrementally.
 */
export function count(countFrom, countTo, countDecimals, countDuration, callback) {
    var startVal = Number(countFrom);
    var endVal = Number(countTo);
    var countDown = startVal > endVal;
    var decimals = Math.max(0, countDecimals);
    var dec = Math.pow(10, decimals);
    var duration = Number(countDuration) * 1000;
    var startTime;
    function runCount(timestamp) {
        var frameVal;
        var progress = timestamp - startTime;
        if (countDown) {
            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
        }
        else {
            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
        }
        if (countDown) {
            frameVal = frameVal < endVal ? endVal : frameVal;
        }
        else {
            frameVal = frameVal > endVal ? endVal : frameVal;
        }
        frameVal = Math.round(frameVal * dec) / dec;
        var tick = progress < duration;
        callback({
            value: frameVal,
            progress: progress,
            timestamp: timestamp,
            finished: !tick
        });
        if (tick) {
            return requestAnimationFrame(function (val) { return runCount(val); });
        }
    }
    return requestAnimationFrame(function (timestamp) {
        startTime = timestamp;
        return runCount(timestamp);
    });
}
/**
 * Determine decimals places
 *
 * @export
 */
export function decimalChecker(countTo) {
    var endVal = Number(countTo);
    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
        return 2;
    }
    return 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL2NvdW50L2NvdW50LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFDOUIsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsUUFBUTtJQUM5RSxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkMsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLElBQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDcEMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM5QyxJQUFJLFNBQVMsQ0FBQztJQUVkLFNBQVMsUUFBUSxDQUFDLFNBQVM7UUFDekIsSUFBSSxRQUFRLENBQUM7UUFDYixJQUFNLFFBQVEsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRXZDLElBQUksU0FBUyxFQUFFO1lBQ2IsUUFBUSxHQUFHLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzdFO2FBQU07WUFDTCxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN6RTtRQUVELElBQUksU0FBUyxFQUFFO1lBQ2IsUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ2xEO2FBQU07WUFDTCxRQUFRLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7UUFFRCxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTVDLElBQU0sSUFBSSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDakMsUUFBUSxDQUFDO1lBQ1AsS0FBSyxFQUFFLFFBQVE7WUFDZixRQUFRLFVBQUE7WUFDUixTQUFTLFdBQUE7WUFDVCxRQUFRLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxxQkFBcUIsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxPQUFPLHFCQUFxQixDQUFDLFVBQUEsU0FBUztRQUNwQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQU87SUFDcEMsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLElBQUksTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDOUMsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFJvYmVydCBQZW5uZXIncyBlYXNlT3V0RXhwb1xyXG5mdW5jdGlvbiBlYXNlT3V0RXhwbyh0LCBiLCBjLCBkKSB7XHJcbiAgcmV0dXJuIChjICogKC1NYXRoLnBvdygyLCAoLTEwICogdCkgLyBkKSArIDEpICogMTAyNCkgLyAxMDIzICsgYjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvdW50cyBmcm9tIGEgbnVtYmVyIHRvIHRoZSBlbmQgaW5jcmVtZW50YWxseS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudChjb3VudEZyb20sIGNvdW50VG8sIGNvdW50RGVjaW1hbHMsIGNvdW50RHVyYXRpb24sIGNhbGxiYWNrKSB7XHJcbiAgY29uc3Qgc3RhcnRWYWwgPSBOdW1iZXIoY291bnRGcm9tKTtcclxuICBjb25zdCBlbmRWYWwgPSBOdW1iZXIoY291bnRUbyk7XHJcbiAgY29uc3QgY291bnREb3duID0gc3RhcnRWYWwgPiBlbmRWYWw7XHJcbiAgY29uc3QgZGVjaW1hbHMgPSBNYXRoLm1heCgwLCBjb3VudERlY2ltYWxzKTtcclxuICBjb25zdCBkZWMgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gIGNvbnN0IGR1cmF0aW9uID0gTnVtYmVyKGNvdW50RHVyYXRpb24pICogMTAwMDtcclxuICBsZXQgc3RhcnRUaW1lO1xyXG5cclxuICBmdW5jdGlvbiBydW5Db3VudCh0aW1lc3RhbXApIHtcclxuICAgIGxldCBmcmFtZVZhbDtcclxuICAgIGNvbnN0IHByb2dyZXNzID0gdGltZXN0YW1wIC0gc3RhcnRUaW1lO1xyXG5cclxuICAgIGlmIChjb3VudERvd24pIHtcclxuICAgICAgZnJhbWVWYWwgPSBzdGFydFZhbCAtIGVhc2VPdXRFeHBvKHByb2dyZXNzLCAwLCBzdGFydFZhbCAtIGVuZFZhbCwgZHVyYXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZnJhbWVWYWwgPSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgc3RhcnRWYWwsIGVuZFZhbCAtIHN0YXJ0VmFsLCBkdXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvdW50RG93bikge1xyXG4gICAgICBmcmFtZVZhbCA9IGZyYW1lVmFsIDwgZW5kVmFsID8gZW5kVmFsIDogZnJhbWVWYWw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmcmFtZVZhbCA9IGZyYW1lVmFsID4gZW5kVmFsID8gZW5kVmFsIDogZnJhbWVWYWw7XHJcbiAgICB9XHJcblxyXG4gICAgZnJhbWVWYWwgPSBNYXRoLnJvdW5kKGZyYW1lVmFsICogZGVjKSAvIGRlYztcclxuXHJcbiAgICBjb25zdCB0aWNrID0gcHJvZ3Jlc3MgPCBkdXJhdGlvbjtcclxuICAgIGNhbGxiYWNrKHtcclxuICAgICAgdmFsdWU6IGZyYW1lVmFsLFxyXG4gICAgICBwcm9ncmVzcyxcclxuICAgICAgdGltZXN0YW1wLFxyXG4gICAgICBmaW5pc2hlZDogIXRpY2tcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh0aWNrKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodmFsID0+IHJ1bkNvdW50KHZhbCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lc3RhbXAgPT4ge1xyXG4gICAgc3RhcnRUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgcmV0dXJuIHJ1bkNvdW50KHRpbWVzdGFtcCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgZGVjaW1hbHMgcGxhY2VzXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNpbWFsQ2hlY2tlcihjb3VudFRvKSB7XHJcbiAgY29uc3QgZW5kVmFsID0gTnVtYmVyKGNvdW50VG8pO1xyXG5cclxuICBpZiAoZW5kVmFsICUgMSAhPT0gMCAmJiBNYXRoLmFicyhlbmRWYWwpIDw9IDEwKSB7XHJcbiAgICByZXR1cm4gMjtcclxuICB9XHJcblxyXG4gIHJldHVybiAwO1xyXG59XHJcbiJdfQ==
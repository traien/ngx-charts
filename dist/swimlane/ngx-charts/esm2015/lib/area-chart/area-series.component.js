import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { area } from 'd3-shape';
import { sortLinear, sortByTime, sortByDomain } from '../utils/sort';
let AreaSeriesComponent = class AreaSeriesComponent {
    constructor() {
        this.baseValue = 'auto';
        this.stacked = false;
        this.normalized = false;
        this.animations = true;
        this.select = new EventEmitter();
    }
    ngOnChanges(changes) {
        this.update();
    }
    update() {
        this.updateGradient();
        let currentArea;
        let startingArea;
        const xProperty = d => {
            const label = d.name;
            return this.xScale(label);
        };
        if (this.stacked || this.normalized) {
            currentArea = area()
                .x(xProperty)
                .y0((d, i) => this.yScale(d.d0))
                .y1((d, i) => this.yScale(d.d1));
            startingArea = area()
                .x(xProperty)
                .y0(d => this.yScale.range()[0])
                .y1(d => this.yScale.range()[0]);
        }
        else {
            currentArea = area()
                .x(xProperty)
                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))
                .y1(d => this.yScale(d.value));
            startingArea = area()
                .x(xProperty)
                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))
                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));
        }
        currentArea.curve(this.curve);
        startingArea.curve(this.curve);
        this.opacity = 0.8;
        let data = this.data.series;
        if (this.scaleType === 'linear') {
            data = sortLinear(data, 'name');
        }
        else if (this.scaleType === 'time') {
            data = sortByTime(data, 'name');
        }
        else {
            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());
        }
        this.path = currentArea(data);
        this.startingPath = startingArea(data);
    }
    updateGradient() {
        if (this.colors.scaleType === 'linear') {
            this.hasGradient = true;
            if (this.stacked || this.normalized) {
                const d0values = this.data.series.map(d => d.d0);
                const d1values = this.data.series.map(d => d.d1);
                const max = Math.max(...d1values);
                const min = Math.min(...d0values);
                this.gradientStops = this.colors.getLinearGradientStops(max, min);
            }
            else {
                const values = this.data.series.map(d => d.value);
                const max = Math.max(...values);
                this.gradientStops = this.colors.getLinearGradientStops(max);
            }
        }
        else {
            this.hasGradient = false;
            this.gradientStops = undefined;
        }
    }
    isActive(entry) {
        if (!this.activeEntries)
            return false;
        const item = this.activeEntries.find(d => {
            return entry.name === d.name;
        });
        return item !== undefined;
    }
    isInactive(entry) {
        if (!this.activeEntries || this.activeEntries.length === 0)
            return false;
        const item = this.activeEntries.find(d => {
            return entry.name === d.name;
        });
        return item === undefined;
    }
};
__decorate([
    Input()
], AreaSeriesComponent.prototype, "data", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "xScale", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "yScale", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "baseValue", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "colors", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "scaleType", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "stacked", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "normalized", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "gradient", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "curve", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "activeEntries", void 0);
__decorate([
    Input()
], AreaSeriesComponent.prototype, "animations", void 0);
__decorate([
    Output()
], AreaSeriesComponent.prototype, "select", void 0);
AreaSeriesComponent = __decorate([
    Component({
        selector: 'g[ngx-charts-area-series]',
        template: `
    <svg:g
      ngx-charts-area
      class="area-series"
      [data]="data"
      [path]="path"
      [fill]="colors.getColor(data.name)"
      [stops]="gradientStops"
      [startingPath]="startingPath"
      [opacity]="opacity"
      [gradient]="gradient || hasGradient"
      [animations]="animations"
      [class.active]="isActive(data)"
      [class.inactive]="isInactive(data)"
    />
  `,
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], AreaSeriesComponent);
export { AreaSeriesComponent };
//# sourceMappingURL=data:application/json;base64,
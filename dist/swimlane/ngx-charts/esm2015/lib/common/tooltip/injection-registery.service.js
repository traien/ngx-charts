export class InjectionRegisteryService {
    constructor(injectionService) {
        this.injectionService = injectionService;
        this.defaults = {};
        this.components = new Map();
    }
    getByType(type = this.type) {
        return this.components.get(type);
    }
    create(bindings) {
        return this.createByType(this.type, bindings);
    }
    createByType(type, bindings) {
        bindings = this.assignDefaults(bindings);
        const component = this.injectComponent(type, bindings);
        this.register(type, component);
        return component;
    }
    destroy(instance) {
        const compsByType = this.components.get(instance.componentType);
        if (compsByType && compsByType.length) {
            const idx = compsByType.indexOf(instance);
            if (idx > -1) {
                const component = compsByType[idx];
                component.destroy();
                compsByType.splice(idx, 1);
            }
        }
    }
    destroyAll() {
        this.destroyByType(this.type);
    }
    destroyByType(type) {
        const comps = this.components.get(type);
        if (comps && comps.length) {
            let i = comps.length - 1;
            while (i >= 0) {
                this.destroy(comps[i--]);
            }
        }
    }
    injectComponent(type, bindings) {
        return this.injectionService.appendComponent(type, bindings);
    }
    assignDefaults(bindings) {
        const inputs = Object.assign({}, this.defaults.inputs);
        const outputs = Object.assign({}, this.defaults.outputs);
        if (!bindings.inputs && !bindings.outputs) {
            bindings = { inputs: bindings };
        }
        if (inputs) {
            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);
        }
        if (outputs) {
            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);
        }
        return bindings;
    }
    register(type, component) {
        if (!this.components.has(type)) {
            this.components.set(type, []);
        }
        const types = this.components.get(type);
        types.push(component);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uLXJlZ2lzdGVyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL3Rvb2x0aXAvaW5qZWN0aW9uLXJlZ2lzdGVyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sT0FBZ0IseUJBQXlCO0lBTTdDLFlBQW1CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSDNDLGFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBQy9CLGVBQVUsR0FBcUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUVYLENBQUM7SUFFekQsU0FBUyxDQUFDLE9BQWdCLElBQUksQ0FBQyxJQUFJO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQWEsRUFBRSxRQUF5QjtRQUNuRCxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUvQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQXlCO1FBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFMUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3BCLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBYTtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFUyxlQUFlLENBQUMsSUFBYSxFQUFFLFFBQXlCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVTLGNBQWMsQ0FBQyxRQUF5QjtRQUNoRCxNQUFNLE1BQU0scUJBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUMzQyxNQUFNLE9BQU8scUJBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDekMsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxNQUFNLEVBQUU7WUFDVixRQUFRLENBQUMsTUFBTSxtQ0FBUSxNQUFNLEdBQUssUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxPQUFPLEVBQUU7WUFDWCxRQUFRLENBQUMsT0FBTyxtQ0FBUSxPQUFPLEdBQUssUUFBUSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVTLFFBQVEsQ0FBQyxJQUFhLEVBQUUsU0FBMEI7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGlvblNlcnZpY2UgfSBmcm9tICcuL2luamVjdGlvbi5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFydGlhbEJpbmRpbmdzIHtcclxuICBpbnB1dHM/OiBvYmplY3Q7XHJcbiAgb3V0cHV0cz86IG9iamVjdDtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluamVjdGlvblJlZ2lzdGVyeVNlcnZpY2U8VCA9IGFueT4ge1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCB0eXBlOiBUeXBlPFQ+O1xyXG5cclxuICBwcm90ZWN0ZWQgZGVmYXVsdHM6IFBhcnRpYWxCaW5kaW5ncyA9IHt9O1xyXG4gIHByb3RlY3RlZCBjb21wb25lbnRzOiBNYXA8YW55LCBBcnJheTxDb21wb25lbnRSZWY8VD4+PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGluamVjdGlvblNlcnZpY2U6IEluamVjdGlvblNlcnZpY2UpIHt9XHJcblxyXG4gIGdldEJ5VHlwZSh0eXBlOiBUeXBlPFQ+ID0gdGhpcy50eXBlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZShiaW5kaW5nczogb2JqZWN0KTogQ29tcG9uZW50UmVmPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUJ5VHlwZSh0aGlzLnR5cGUsIGJpbmRpbmdzKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUJ5VHlwZSh0eXBlOiBUeXBlPFQ+LCBiaW5kaW5nczogUGFydGlhbEJpbmRpbmdzKTogQ29tcG9uZW50UmVmPFQ+IHtcclxuICAgIGJpbmRpbmdzID0gdGhpcy5hc3NpZ25EZWZhdWx0cyhiaW5kaW5ncyk7XHJcblxyXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5pbmplY3RDb21wb25lbnQodHlwZSwgYmluZGluZ3MpO1xyXG4gICAgdGhpcy5yZWdpc3Rlcih0eXBlLCBjb21wb25lbnQpO1xyXG5cclxuICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KGluc3RhbmNlOiBDb21wb25lbnRSZWY8VD4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbXBzQnlUeXBlID0gdGhpcy5jb21wb25lbnRzLmdldChpbnN0YW5jZS5jb21wb25lbnRUeXBlKTtcclxuXHJcbiAgICBpZiAoY29tcHNCeVR5cGUgJiYgY29tcHNCeVR5cGUubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGlkeCA9IGNvbXBzQnlUeXBlLmluZGV4T2YoaW5zdGFuY2UpO1xyXG5cclxuICAgICAgaWYgKGlkeCA+IC0xKSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29tcHNCeVR5cGVbaWR4XTtcclxuICAgICAgICBjb21wb25lbnQuZGVzdHJveSgpO1xyXG4gICAgICAgIGNvbXBzQnlUeXBlLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95QWxsKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kZXN0cm95QnlUeXBlKHRoaXMudHlwZSk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95QnlUeXBlKHR5cGU6IFR5cGU8VD4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbXBzID0gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcclxuXHJcbiAgICBpZiAoY29tcHMgJiYgY29tcHMubGVuZ3RoKSB7XHJcbiAgICAgIGxldCBpID0gY29tcHMubGVuZ3RoIC0gMTtcclxuICAgICAgd2hpbGUgKGkgPj0gMCkge1xyXG4gICAgICAgIHRoaXMuZGVzdHJveShjb21wc1tpLS1dKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGluamVjdENvbXBvbmVudCh0eXBlOiBUeXBlPFQ+LCBiaW5kaW5nczogUGFydGlhbEJpbmRpbmdzKTogQ29tcG9uZW50UmVmPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmluamVjdGlvblNlcnZpY2UuYXBwZW5kQ29tcG9uZW50KHR5cGUsIGJpbmRpbmdzKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhc3NpZ25EZWZhdWx0cyhiaW5kaW5nczogUGFydGlhbEJpbmRpbmdzKTogUGFydGlhbEJpbmRpbmdzIHtcclxuICAgIGNvbnN0IGlucHV0cyA9IHsgLi4udGhpcy5kZWZhdWx0cy5pbnB1dHMgfTtcclxuICAgIGNvbnN0IG91dHB1dHMgPSB7IC4uLnRoaXMuZGVmYXVsdHMub3V0cHV0cyB9O1xyXG5cclxuICAgIGlmICghYmluZGluZ3MuaW5wdXRzICYmICFiaW5kaW5ncy5vdXRwdXRzKSB7XHJcbiAgICAgIGJpbmRpbmdzID0geyBpbnB1dHM6IGJpbmRpbmdzIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlucHV0cykge1xyXG4gICAgICBiaW5kaW5ncy5pbnB1dHMgPSB7IC4uLmlucHV0cywgLi4uYmluZGluZ3MuaW5wdXRzIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG91dHB1dHMpIHtcclxuICAgICAgYmluZGluZ3Mub3V0cHV0cyA9IHsgLi4ub3V0cHV0cywgLi4uYmluZGluZ3Mub3V0cHV0cyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBiaW5kaW5ncztcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCByZWdpc3Rlcih0eXBlOiBUeXBlPFQ+LCBjb21wb25lbnQ6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudHMuaGFzKHR5cGUpKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50cy5zZXQodHlwZSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHR5cGVzID0gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcclxuICAgIHR5cGVzLnB1c2goY29tcG9uZW50KTtcclxuICB9XHJcbn1cclxuIl19
import { scaleBand } from 'd3-scale';
export function gridSize(dims, len, minWidth) {
    let rows = 1;
    let cols = len;
    const width = dims.width;
    if (width > minWidth) {
        while (width / cols < minWidth) {
            rows += 1;
            cols = Math.ceil(len / rows);
        }
    }
    return [cols, rows];
}
export function gridLayout(dims, data, minWidth, designatedTotal) {
    const xScale = scaleBand();
    const yScale = scaleBand();
    const width = dims.width;
    const height = dims.height;
    const [columns, rows] = gridSize(dims, data.length, minWidth);
    const xDomain = [];
    const yDomain = [];
    for (let i = 0; i < rows; i++) {
        yDomain.push(i);
    }
    for (let i = 0; i < columns; i++) {
        xDomain.push(i);
    }
    xScale.domain(xDomain);
    yScale.domain(yDomain);
    xScale.rangeRound([0, width], 0.1);
    yScale.rangeRound([0, height], 0.1);
    const res = [];
    const total = designatedTotal ? designatedTotal : getTotal(data);
    const cardWidth = xScale.bandwidth();
    const cardHeight = yScale.bandwidth();
    for (let i = 0; i < data.length; i++) {
        res[i] = {};
        res[i].data = {
            name: data[i] ? data[i].name : '',
            value: data[i] ? data[i].value : undefined,
            extra: data[i] ? data[i].extra : undefined,
            label: data[i] ? data[i].label : ''
        };
        res[i].x = xScale(i % columns);
        res[i].y = yScale(Math.floor(i / columns));
        res[i].width = cardWidth;
        res[i].height = cardHeight;
        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;
        res[i].data.total = total;
    }
    return res;
}
function getTotal(results) {
    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1sYXlvdXQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL2dyaWQtbGF5b3V0LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXJDLE1BQU0sVUFBVSxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRO0lBQzFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNmLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFFekIsSUFBSSxLQUFLLEdBQUcsUUFBUSxFQUFFO1FBQ3BCLE9BQU8sS0FBSyxHQUFHLElBQUksR0FBRyxRQUFRLEVBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUNWLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUM5QjtLQUNGO0lBRUQsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxlQUFlO0lBQzlELE1BQU0sTUFBTSxHQUFRLFNBQVMsRUFBVSxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxHQUFRLFNBQVMsRUFBVSxDQUFDO0lBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUUzQixNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU5RCxNQUFNLE9BQU8sR0FBRyxF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QUM7QUFDYixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsT0FBTztJQUN2QixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2FsZUJhbmQgfSBmcm9tICdkMy1zY2FsZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3JpZFNpemUoZGltcywgbGVuLCBtaW5XaWR0aCkge1xyXG4gIGxldCByb3dzID0gMTtcclxuICBsZXQgY29scyA9IGxlbjtcclxuICBjb25zdCB3aWR0aCA9IGRpbXMud2lkdGg7XHJcblxyXG4gIGlmICh3aWR0aCA+IG1pbldpZHRoKSB7XHJcbiAgICB3aGlsZSAod2lkdGggLyBjb2xzIDwgbWluV2lkdGgpIHtcclxuICAgICAgcm93cyArPSAxO1xyXG4gICAgICBjb2xzID0gTWF0aC5jZWlsKGxlbiAvIHJvd3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtjb2xzLCByb3dzXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdyaWRMYXlvdXQoZGltcywgZGF0YSwgbWluV2lkdGgsIGRlc2lnbmF0ZWRUb3RhbCkge1xyXG4gIGNvbnN0IHhTY2FsZTogYW55ID0gc2NhbGVCYW5kPG51bWJlcj4oKTtcclxuICBjb25zdCB5U2NhbGU6IGFueSA9IHNjYWxlQmFuZDxudW1iZXI+KCk7XHJcbiAgY29uc3Qgd2lkdGggPSBkaW1zLndpZHRoO1xyXG4gIGNvbnN0IGhlaWdodCA9IGRpbXMuaGVpZ2h0O1xyXG5cclxuICBjb25zdCBbY29sdW1ucywgcm93c10gPSBncmlkU2l6ZShkaW1zLCBkYXRhLmxlbmd0aCwgbWluV2lkdGgpO1xyXG5cclxuICBjb25zdCB4RG9tYWluID0gW107XHJcbiAgY29uc3QgeURvbWFpbiA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XHJcbiAgICB5RG9tYWluLnB1c2goaSk7XHJcbiAgfVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uczsgaSsrKSB7XHJcbiAgICB4RG9tYWluLnB1c2goaSk7XHJcbiAgfVxyXG4gIHhTY2FsZS5kb21haW4oeERvbWFpbik7XHJcbiAgeVNjYWxlLmRvbWFpbih5RG9tYWluKTtcclxuXHJcbiAgeFNjYWxlLnJhbmdlUm91bmQoWzAsIHdpZHRoXSwgMC4xKTtcclxuICB5U2NhbGUucmFuZ2VSb3VuZChbMCwgaGVpZ2h0XSwgMC4xKTtcclxuXHJcbiAgY29uc3QgcmVzID0gW107XHJcbiAgY29uc3QgdG90YWwgPSBkZXNpZ25hdGVkVG90YWwgPyBkZXNpZ25hdGVkVG90YWwgOiBnZXRUb3RhbChkYXRhKTtcclxuICBjb25zdCBjYXJkV2lkdGggPSB4U2NhbGUuYmFuZHdpZHRoKCk7XHJcbiAgY29uc3QgY2FyZEhlaWdodCA9IHlTY2FsZS5iYW5kd2lkdGgoKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICByZXNbaV0gPSB7fTtcclxuICAgIHJlc1tpXS5kYXRhID0ge1xyXG4gICAgICBuYW1lOiBkYXRhW2ldID8gZGF0YVtpXS5uYW1lIDogJycsXHJcbiAgICAgIHZhbHVlOiBkYXRhW2ldID8gZGF0YVtpXS52YWx1ZSA6IHVuZGVmaW5lZCxcclxuICAgICAgZXh0cmE6IGRhdGFbaV0gPyBkYXRhW2ldLmV4dHJhIDogdW5kZWZpbmVkLFxyXG4gICAgICBsYWJlbDogZGF0YVtpXSA/IGRhdGFbaV0ubGFiZWwgOiAnJ1xyXG4gICAgfTtcclxuICAgIHJlc1tpXS54ID0geFNjYWxlKGkgJSBjb2x1bW5zKTtcclxuICAgIHJlc1tpXS55ID0geVNjYWxlKE1hdGguZmxvb3IoaSAvIGNvbHVtbnMpKTtcclxuICAgIHJlc1tpXS53aWR0aCA9IGNhcmRXaWR0aDtcclxuICAgIHJlc1tpXS5oZWlnaHQgPSBjYXJkSGVpZ2h0O1xyXG4gICAgcmVzW2ldLmRhdGEucGVyY2VudCA9IHRvdGFsID4gMCA/IHJlc1tpXS5kYXRhLnZhbHVlIC8gdG90YWwgOiAwO1xyXG4gICAgcmVzW2ldLmRhdGEudG90YWwgPSB0b3RhbDtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRvdGFsKHJlc3VsdHMpIHtcclxuICByZXR1cm4gcmVzdWx0cy5tYXAoZCA9PiAoZCA/IGQudmFsdWUgOiAwKSkucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKTtcclxufVxyXG4iXX0=